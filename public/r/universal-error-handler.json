{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "universal-error-handler",
  "type": "registry:lib",
  "title": "Universal Error Handler",
  "description": "Complete error handling system with toast notifications, context, and interceptors",
  "dependencies": [
    "@radix-ui/react-toast",
    "class-variance-authority",
    "lucide-react"
  ],
  "files": [
    {
      "path": "registry/error-handler/ui/toast.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \" inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n",
      "type": "registry:component",
      "target": "components/ui/toast.tsx"
    },
    {
      "path": "registry/error-handler/ui/toaster.tsx",
      "content": "\"use client\"\n\nimport { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n",
      "type": "registry:component",
      "target": "components/ui/toaster.tsx"
    },
    {
      "path": "registry/error-handler/hooks/use-toast.ts",
      "content": "\"use client\"\n\n// Inspired by react-hot-toast library\nimport * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n",
      "type": "registry:hook",
      "target": "hooks/use-toast.ts"
    },
    {
      "path": "registry/error-handler/utils/error-handler/types.ts",
      "content": "export interface ErrorContext {\n  statusCode: number\n  message: string\n  timestamp: Date\n  url: string\n  method: string\n  userMessage: string\n  canRetry: boolean\n  retryCount: number\n  originalError?: Error\n  actionLabel?: string\n  actionUrl?: string\n  onAction?: () => void\n}\n\nexport interface ErrorHandlerConfig {\n  showToast: boolean\n  enableRetry: boolean\n  maxRetries: number\n  retryDelay: number\n  debugMode: boolean\n  customMessages: Record<number, string>\n  retryableStatusCodes: number[]\n  timeoutMs: number\n}\n\nexport interface RetryConfig {\n  maxRetries: number\n  baseDelay: number\n  maxDelay: number\n  backoffFactor: number\n}\n\nexport type ErrorSeverity = \"info\" | \"warning\" | \"error\" | \"critical\"\n\nexport interface ErrorHandlerContextType {\n  config: ErrorHandlerConfig\n  updateConfig: (config: Partial<ErrorHandlerConfig>) => void\n  reportError: (error: ErrorContext) => void\n}\n\nexport type HttpMethod = \"GET\" | \"POST\" | \"PUT\" | \"DELETE\" | \"PATCH\" | \"HEAD\" | \"OPTIONS\"\n\nexport interface RequestConfig extends RequestInit {\n  timeout?: number\n  retries?: number\n  skipErrorHandler?: boolean\n}\n",
      "type": "registry:lib",
      "target": "utils/error-handler/types.ts"
    },
    {
      "path": "registry/error-handler/utils/error-handler/error-mapper.ts",
      "content": "import type { ErrorSeverity } from \"./types\"\n\nexport interface ErrorMapping {\n  userMessage: string\n  severity: ErrorSeverity\n  canRetry: boolean\n  actionable?: string\n  actionLabel?: string\n  actionUrl?: string\n}\n\nexport const DEFAULT_ERROR_MAPPINGS: Record<number, ErrorMapping> = {\n  // 1xx Informational\n  100: {\n    userMessage: \"Request is being processed...\",\n    severity: \"info\",\n    canRetry: false,\n  },\n\n  // 2xx Success (shouldn't trigger error handler, but included for completeness)\n  200: {\n    userMessage: \"Request completed successfully\",\n    severity: \"info\",\n    canRetry: false,\n  },\n\n  // 3xx Redirection\n  301: {\n    userMessage: \"The resource has moved permanently\",\n    severity: \"info\",\n    canRetry: false,\n  },\n  302: {\n    userMessage: \"The resource has moved temporarily\",\n    severity: \"info\",\n    canRetry: false,\n  },\n\n  // 4xx Client Errors\n  400: {\n    userMessage: \"The information you provided is invalid. Please check and try again.\",\n    severity: \"error\",\n    canRetry: false,\n    actionable: \"Review your input for any errors\",\n  },\n  401: {\n    userMessage: \"You need to log in to access this resource.\",\n    severity: \"warning\",\n    canRetry: false,\n    actionable: \"Please sign in to continue\",\n    actionLabel: \"Sign In\",\n    actionUrl: \"/login\",\n  },\n  403: {\n    userMessage: \"You don't have permission to perform this action.\",\n    severity: \"error\",\n    canRetry: false,\n    actionable: \"Contact support if you believe this is an error\",\n    actionLabel: \"Contact Support\",\n    actionUrl: \"/support\",\n  },\n  404: {\n    userMessage: \"The requested resource could not be found.\",\n    severity: \"error\",\n    canRetry: false,\n    actionable: \"Check the URL or navigate from the home page\",\n    actionLabel: \"Go Home\",\n    actionUrl: \"/\",\n  },\n  405: {\n    userMessage: \"This action is not allowed for this resource.\",\n    severity: \"error\",\n    canRetry: false,\n  },\n  408: {\n    userMessage: \"The request took too long to complete.\",\n    severity: \"warning\",\n    canRetry: true,\n    actionable: \"Please try again\",\n    actionLabel: \"Retry\",\n  },\n  409: {\n    userMessage: \"There was a conflict with your request.\",\n    severity: \"error\",\n    canRetry: false,\n    actionable: \"Please refresh the page and try again\",\n    actionLabel: \"Refresh\",\n  },\n  410: {\n    userMessage: \"This resource is no longer available.\",\n    severity: \"error\",\n    canRetry: false,\n    actionLabel: \"Go Back\",\n  },\n  422: {\n    userMessage: \"The data you provided could not be processed.\",\n    severity: \"error\",\n    canRetry: false,\n    actionable: \"Please check your input and try again\",\n  },\n  429: {\n    userMessage: \"You're making requests too quickly. Please slow down.\",\n    severity: \"warning\",\n    canRetry: true,\n    actionable: \"Wait a moment before trying again\",\n    actionLabel: \"Try Again\",\n  },\n\n  // 5xx Server Errors\n  500: {\n    userMessage: \"Something went wrong on our servers.\",\n    severity: \"error\",\n    canRetry: true,\n    actionable: \"Please try again in a moment\",\n    actionLabel: \"Retry\",\n  },\n  501: {\n    userMessage: \"This feature is not yet available.\",\n    severity: \"error\",\n    canRetry: false,\n  },\n  502: {\n    userMessage: \"Our service is temporarily unavailable.\",\n    severity: \"error\",\n    canRetry: true,\n    actionable: \"Please try again\",\n    actionLabel: \"Retry\",\n  },\n  503: {\n    userMessage: \"Our service is temporarily down for maintenance.\",\n    severity: \"error\",\n    canRetry: true,\n    actionable: \"Please try again in a few minutes\",\n    actionLabel: \"Retry\",\n  },\n  504: {\n    userMessage: \"The server took too long to respond.\",\n    severity: \"warning\",\n    canRetry: true,\n    actionable: \"Please try again\",\n    actionLabel: \"Retry\",\n  },\n}\n\nexport const NETWORK_ERROR_MAPPINGS = {\n  NETWORK_ERROR: {\n    userMessage: \"Unable to connect to the server. Please check your internet connection.\",\n    severity: \"error\" as ErrorSeverity,\n    canRetry: true,\n    actionable: \"Verify your internet connection is stable\",\n    actionLabel: \"Retry\",\n  },\n  TIMEOUT_ERROR: {\n    userMessage: \"The request timed out. Please try again.\",\n    severity: \"warning\" as ErrorSeverity,\n    canRetry: true,\n    actionable: \"Check your connection speed\",\n    actionLabel: \"Retry\",\n  },\n  PARSE_ERROR: {\n    userMessage: \"Unable to process the server response.\",\n    severity: \"error\" as ErrorSeverity,\n    canRetry: true,\n    actionLabel: \"Retry\",\n  },\n  UNKNOWN_ERROR: {\n    userMessage: \"An unexpected error occurred. Please try again.\",\n    severity: \"error\" as ErrorSeverity,\n    canRetry: true,\n    actionLabel: \"Retry\",\n  },\n}\n\nexport function getErrorMapping(statusCode: number, customMappings?: Record<number, string>): ErrorMapping {\n  // Check custom mappings first\n  if (customMappings?.[statusCode]) {\n    return {\n      userMessage: customMappings[statusCode],\n      severity: statusCode >= 500 ? \"error\" : statusCode >= 400 ? \"warning\" : \"info\",\n      canRetry: statusCode >= 500 || statusCode === 408 || statusCode === 429,\n    }\n  }\n\n  // Use default mappings\n  const mapping = DEFAULT_ERROR_MAPPINGS[statusCode]\n  if (mapping) {\n    return mapping\n  }\n\n  // Fallback based on status code range\n  if (statusCode >= 500) {\n    return {\n      userMessage: \"Server error occurred. Please try again later\",\n      severity: \"error\",\n      canRetry: true,\n    }\n  } else if (statusCode >= 400) {\n    return {\n      userMessage: \"Request failed. Please check your input and try again\",\n      severity: \"error\",\n      canRetry: false,\n    }\n  } else {\n    return NETWORK_ERROR_MAPPINGS.UNKNOWN_ERROR\n  }\n}\n",
      "type": "registry:lib",
      "target": "utils/error-handler/error-mapper.ts"
    },
    {
      "path": "registry/error-handler/utils/error-handler/interceptor.ts",
      "content": "import type { ErrorContext, ErrorHandlerConfig, RequestConfig, RetryConfig } from \"./types\"\nimport { getErrorMapping, NETWORK_ERROR_MAPPINGS } from \"./error-mapper\"\n\nclass HttpInterceptor {\n  private config: ErrorHandlerConfig\n  private originalFetch: typeof fetch\n  private retryConfig: RetryConfig\n  private reportError: (error: ErrorContext) => void\n  private reportedErrors = new Set<string>()\n  private lastReportTime = 0\n  private readonly REPORT_THROTTLE_MS = 1000\n\n  constructor(config: ErrorHandlerConfig, reportError: (error: ErrorContext) => void) {\n    this.config = config\n    this.reportError = reportError\n    this.originalFetch = globalThis.fetch\n    this.retryConfig = {\n      maxRetries: config.maxRetries,\n      baseDelay: config.retryDelay,\n      maxDelay: 30000, // 30 seconds max delay\n      backoffFactor: 2,\n    }\n    this.setupInterceptor()\n  }\n\n  private setupInterceptor() {\n    globalThis.fetch = this.interceptedFetch.bind(this)\n  }\n\n  public restore() {\n    globalThis.fetch = this.originalFetch\n  }\n\n  public updateConfig(newConfig: ErrorHandlerConfig) {\n    this.config = newConfig\n    this.retryConfig.maxRetries = newConfig.maxRetries\n    this.retryConfig.baseDelay = newConfig.retryDelay\n  }\n\n  private async interceptedFetch(input: RequestInfo | URL, init?: RequestConfig): Promise<Response> {\n    const url = typeof input === \"string\" ? input : input instanceof URL ? input.href : input.url\n    const method = init?.method || \"GET\"\n    const skipErrorHandler = init?.skipErrorHandler || false\n    const timeout = init?.timeout || this.config.timeoutMs\n    const maxRetries = init?.retries ?? this.config.maxRetries\n\n    // Remove custom properties from init to avoid fetch errors\n    const { timeout: _, retries: __, skipErrorHandler: ___, ...fetchInit } = init || {}\n\n    if (skipErrorHandler) {\n      return this.originalFetch.call(globalThis, input, fetchInit)\n    }\n\n    return this.executeWithRetry(() => this.fetchWithTimeout(input, fetchInit, timeout), url, method, maxRetries)\n  }\n\n  private async fetchWithTimeout(input: RequestInfo | URL, init?: RequestInit, timeoutMs = 10000): Promise<Response> {\n    const controller = new AbortController()\n    const timeoutId = setTimeout(() => controller.abort(), timeoutMs)\n\n    try {\n      const response = await this.originalFetch.call(globalThis, input, {\n        ...init,\n        signal: controller.signal,\n      })\n      clearTimeout(timeoutId)\n      return response\n    } catch (error) {\n      clearTimeout(timeoutId)\n      if (error instanceof Error && error.name === \"AbortError\") {\n        throw new Error(\"TIMEOUT_ERROR\")\n      }\n      throw error\n    }\n  }\n\n  private async executeWithRetry(\n    fetchFn: () => Promise<Response>,\n    url: string,\n    method: string,\n    maxRetries: number,\n    retryCount = 0,\n  ): Promise<Response> {\n    try {\n      const response = await fetchFn()\n\n      // Check if response indicates an error\n      if (!response.ok) {\n        // Determine if we should retry\n        const shouldRetry = this.shouldRetry(response.status, retryCount, maxRetries)\n\n        if (shouldRetry) {\n          await this.delay(this.calculateDelay(retryCount))\n          return this.executeWithRetry(fetchFn, url, method, maxRetries, retryCount + 1)\n        }\n\n        // Only report error if we're not retrying\n        const errorContext = this.createErrorContext(response.status, response.statusText, url, method, retryCount)\n        this.reportErrorContext(errorContext)\n\n        // Create a custom error that preserves the status code\n        const error = new Error(`HTTP ${response.status}: ${response.statusText}`)\n        ;(error as any).status = response.status\n        ;(error as any).response = response\n        throw error\n      }\n\n      return response\n    } catch (error) {\n      // Check if this is an HTTP error with a status code\n      if ((error as any).status) {\n        // This is an HTTP error, don't treat it as a network error\n        throw error\n      }\n\n      const errorContext = this.createErrorContextFromException(error as Error, url, method, retryCount)\n\n      // Determine if we should retry based on error type\n      const shouldRetry = this.shouldRetryException(error as Error, retryCount, maxRetries)\n\n      if (shouldRetry) {\n        await this.delay(this.calculateDelay(retryCount))\n        return this.executeWithRetry(fetchFn, url, method, maxRetries, retryCount + 1)\n      }\n\n      // Report error for non-retryable network errors\n      this.reportErrorContext(errorContext)\n      throw error\n    }\n  }\n\n  private shouldRetry(statusCode: number, retryCount: number, maxRetries: number): boolean {\n    if (!this.config.enableRetry || retryCount >= maxRetries) {\n      return false\n    }\n\n    return this.config.retryableStatusCodes.includes(statusCode)\n  }\n\n  private shouldRetryException(error: Error, retryCount: number, maxRetries: number): boolean {\n    if (!this.config.enableRetry || retryCount >= maxRetries) {\n      return false\n    }\n\n    // Retry on network errors and timeouts\n    return (\n      error.message === \"TIMEOUT_ERROR\" ||\n      error.message === \"NETWORK_ERROR\" ||\n      error.name === \"TypeError\" || // Network errors often manifest as TypeError\n      error.message.includes(\"fetch\")\n    )\n  }\n\n  private calculateDelay(retryCount: number): number {\n    const delay = Math.min(\n      this.retryConfig.baseDelay * Math.pow(this.retryConfig.backoffFactor, retryCount),\n      this.retryConfig.maxDelay,\n    )\n\n    // Add jitter to prevent thundering herd\n    return delay + Math.random() * 1000\n  }\n\n  private delay(ms: number): Promise<void> {\n    return new Promise((resolve) => setTimeout(resolve, ms))\n  }\n\n  private createErrorContext(\n    statusCode: number,\n    message: string,\n    url: string,\n    method: string,\n    retryCount: number,\n  ): ErrorContext {\n    const mapping = getErrorMapping(statusCode, this.config.customMessages)\n\n    return {\n      statusCode,\n      message,\n      timestamp: new Date(),\n      url,\n      method,\n      userMessage: mapping.userMessage,\n      canRetry: mapping.canRetry,\n      retryCount,\n      actionLabel: mapping.actionLabel,\n      actionUrl: mapping.actionUrl,\n    }\n  }\n\n  private createErrorContextFromException(error: Error, url: string, method: string, retryCount: number): ErrorContext {\n    let mapping\n    let statusCode = 0\n\n    if (error.message === \"TIMEOUT_ERROR\") {\n      mapping = NETWORK_ERROR_MAPPINGS.TIMEOUT_ERROR\n      statusCode = 408\n    } else if (error.name === \"TypeError\" || error.message.includes(\"fetch\")) {\n      mapping = NETWORK_ERROR_MAPPINGS.NETWORK_ERROR\n      statusCode = 0\n    } else {\n      mapping = NETWORK_ERROR_MAPPINGS.UNKNOWN_ERROR\n      statusCode = 0\n    }\n\n    const errorContext = {\n      statusCode,\n      message: error.message,\n      timestamp: new Date(),\n      url,\n      method,\n      userMessage: mapping.userMessage,\n      canRetry: mapping.canRetry,\n      retryCount,\n      originalError: error,\n    }\n\n    // Report the error immediately\n    this.reportErrorContext(errorContext)\n    return errorContext\n  }\n\n  private reportErrorContext(errorContext: ErrorContext) {\n    // Create a unique key for this error to prevent duplicates\n    const errorKey = `${errorContext.statusCode}-${errorContext.url}-${errorContext.method}`\n    const now = Date.now()\n\n    // Throttle error reporting to prevent loops\n    if (this.reportedErrors.has(errorKey) && now - this.lastReportTime < this.REPORT_THROTTLE_MS) {\n      return\n    }\n\n    this.reportedErrors.add(errorKey)\n    this.lastReportTime = now\n\n    // Clear the error key after some time to allow future reports\n    setTimeout(() => {\n      this.reportedErrors.delete(errorKey)\n    }, this.REPORT_THROTTLE_MS * 5)\n\n    if (this.config.debugMode) {\n      console.error(\"HTTP Error:\", errorContext)\n    }\n\n    // Call the provided reportError callback\n    this.reportError(errorContext)\n  }\n}\n\nexport { HttpInterceptor }\n",
      "type": "registry:lib",
      "target": "utils/error-handler/interceptor.ts"
    },
    {
      "path": "registry/error-handler/utils/error-handler/context.tsx",
      "content": "\"use client\";\n\nimport type React from \"react\";\nimport {\n  createContext,\n  useContext,\n  useCallback,\n  useState,\n  useMemo,\n  useEffect,\n} from \"react\";\nimport type {\n  ErrorHandlerConfig,\n  ErrorHandlerContextType,\n  ErrorContext,\n} from \"./types\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { ToastAction } from \"@/components/ui/toast\";\nimport {\n  AlertTriangle,\n  XCircle,\n  Wifi,\n  Clock,\n  Shield,\n  Home,\n  LogIn,\n  RefreshCw,\n  HelpCircle,\n  Server,\n} from \"lucide-react\";\n\nconst DEFAULT_CONFIG: ErrorHandlerConfig = {\n  showToast: true,\n  enableRetry: true,\n  maxRetries: 3,\n  retryDelay: 1000,\n  debugMode: process.env.NODE_ENV === \"development\",\n  customMessages: {},\n  retryableStatusCodes: [408, 429, 500, 502, 503, 504],\n  timeoutMs: 10000,\n};\n\nconst ErrorHandlerContext = createContext<ErrorHandlerContextType | null>(null);\n\ninterface ErrorHandlerContextProviderProps {\n  children: React.ReactNode;\n  config?: Partial<ErrorHandlerConfig>;\n}\n\nexport function ErrorHandlerContextProvider({\n  children,\n  config: initialConfig = {},\n}: ErrorHandlerContextProviderProps) {\n  const [config, setConfig] = useState<ErrorHandlerConfig>({\n    ...DEFAULT_CONFIG,\n    ...initialConfig,\n  });\n\n  const { toast } = useToast();\n\n  const updateConfig = useCallback((newConfig: Partial<ErrorHandlerConfig>) => {\n    setConfig((prev) => ({ ...prev, ...newConfig }));\n  }, []);\n\n  const reportError = useCallback(\n    (errorContext: ErrorContext) => {\n      if (!config.showToast) return;\n\n      // Make 4xx and 5xx errors destructive to show severity\n      const variant =\n        errorContext.statusCode >= 400 ? \"destructive\" : \"default\";\n\n      // Get appropriate icon for the error\n      const ErrorIcon = getErrorIcon(errorContext.statusCode);\n\n      // Create action element if needed\n      let action = undefined;\n      if (errorContext.actionLabel) {\n        const ActionIcon = getActionIcon(\n          errorContext.statusCode,\n          errorContext.actionLabel\n        );\n\n        action = (\n          <ToastAction\n            altText={errorContext.actionLabel}\n            onClick={() => {\n              if (errorContext.actionUrl) {\n                // Navigate to the URL\n                if (typeof window !== \"undefined\") {\n                  window.location.href = errorContext.actionUrl;\n                }\n              } else if (errorContext.onAction) {\n                // Execute custom action\n                errorContext.onAction();\n              } else if (errorContext.canRetry) {\n                // Default retry action - reload the page\n                if (typeof window !== \"undefined\") {\n                  window.location.reload();\n                }\n              }\n            }}\n          >\n            <ActionIcon className=\"w-4 h-4\" />\n            <span className=\"pl-4\">{errorContext.actionLabel}</span>\n          </ToastAction>\n        );\n      }\n\n      // Show toast notification with icon\n      toast({\n        variant,\n        title: getErrorTitle(errorContext.statusCode),\n        description: (\n          <div className=\"flex items-center gap-2\">\n            <ErrorIcon className=\"w-4 h-4\" />\n            {errorContext.userMessage}\n          </div>\n        ),\n        action,\n        duration: getToastDuration(errorContext.statusCode),\n      });\n\n      // Log error in development\n      if (config.debugMode) {\n        console.group(\"🚨 HTTP Error Handler\");\n        console.error(\"Error Context:\", errorContext);\n        console.error(\"Toast Config:\", {\n          variant,\n          title: getErrorTitle(errorContext.statusCode),\n          description: errorContext.userMessage,\n          hasAction: !!action,\n        });\n        console.groupEnd();\n      }\n    },\n    [config.showToast, config.debugMode, toast]\n  );\n\n  // Listen for manual error reports\n  useEffect(() => {\n    const handleManualError = (event: CustomEvent<ErrorContext>) => {\n      reportError(event.detail);\n    };\n\n    if (typeof window !== \"undefined\") {\n      window.addEventListener(\n        \"manual-error-report\",\n        handleManualError as EventListener\n      );\n    }\n\n    return () => {\n      if (typeof window !== \"undefined\") {\n        window.removeEventListener(\n          \"manual-error-report\",\n          handleManualError as EventListener\n        );\n      }\n    };\n  }, [reportError]);\n\n  const contextValue: ErrorHandlerContextType = useMemo(\n    () => ({\n      config,\n      updateConfig,\n      reportError,\n    }),\n    [config, updateConfig, reportError]\n  );\n\n  return (\n    <ErrorHandlerContext.Provider value={contextValue}>\n      {children}\n    </ErrorHandlerContext.Provider>\n  );\n}\n\nexport function useErrorHandler(): ErrorHandlerContextType {\n  const context = useContext(ErrorHandlerContext);\n  if (!context) {\n    throw new Error(\n      \"useErrorHandler must be used within an ErrorHandlerProvider\"\n    );\n  }\n  return context;\n}\n\nfunction getErrorIcon(statusCode: number) {\n  if (statusCode === 401) return LogIn;\n  if (statusCode === 403) return Shield;\n  if (statusCode === 404) return HelpCircle;\n  if (statusCode === 408 || statusCode === 504) return Clock;\n  if (statusCode === 429) return AlertTriangle;\n  if (statusCode >= 500) return Server;\n  if (statusCode === 0) return Wifi;\n  return XCircle;\n}\n\nfunction getActionIcon(statusCode: number, actionLabel: string) {\n  if (actionLabel.includes(\"Sign In\") || actionLabel.includes(\"Login\"))\n    return LogIn;\n  if (actionLabel.includes(\"Home\")) return Home;\n  if (actionLabel.includes(\"Retry\") || actionLabel.includes(\"Try Again\"))\n    return RefreshCw;\n  if (actionLabel.includes(\"Support\")) return HelpCircle;\n  return RefreshCw;\n}\n\nfunction getErrorTitle(statusCode: number): string {\n  if (statusCode >= 500) return \"Server Error\";\n  if (statusCode >= 400) return \"Request Error\";\n  if (statusCode === 0) return \"Network Error\";\n  return \"Error\";\n}\n\nfunction getToastDuration(statusCode: number): number {\n  // Critical errors stay longer\n  if (statusCode >= 500 || statusCode === 0) return 8000;\n  // Client errors stay medium time\n  if (statusCode >= 400) return 6000;\n  // Other errors stay shorter\n  return 4000;\n}\n",
      "type": "registry:lib",
      "target": "utils/error-handler/context.tsx"
    },
    {
      "path": "registry/error-handler/utils/error-handler/provider.tsx",
      "content": "\"use client\"\n\nimport React, { useEffect, useRef } from \"react\"\nimport { ErrorHandlerContextProvider, useErrorHandler } from \"./context\"\nimport { HttpInterceptor } from \"./interceptor\"\nimport type { ErrorHandlerConfig } from \"./types\"\n\ninterface ErrorHandlerProviderProps {\n  children: React.ReactNode\n  config?: Partial<ErrorHandlerConfig>\n}\n\nexport function ErrorHandlerProvider({ children, config = {} }: ErrorHandlerProviderProps) {\n  return (\n    <ErrorHandlerContextProvider config={config}>\n      <ErrorBoundary>\n        <InterceptorManager />\n        {children}\n      </ErrorBoundary>\n    </ErrorHandlerContextProvider>\n  )\n}\n\n// Separate component to manage interceptor lifecycle\nfunction InterceptorManager() {\n  const interceptorRef = useRef<HttpInterceptor | null>(null)\n  const { config, reportError } = useErrorHandler()\n  const configRef = useRef(config)\n  const reportErrorRef = useRef(reportError)\n\n  // Update refs when values change\n  useEffect(() => {\n    configRef.current = config\n    reportErrorRef.current = reportError\n  }, [config, reportError])\n\n  useEffect(() => {\n    // Initialize interceptor only once\n    if (!interceptorRef.current) {\n      interceptorRef.current = new HttpInterceptor(configRef.current, reportErrorRef.current)\n    }\n\n    return () => {\n      // Cleanup interceptor on unmount\n      if (interceptorRef.current) {\n        interceptorRef.current.restore()\n        interceptorRef.current = null\n      }\n    }\n  }, []) // Empty dependency array - only run once\n\n  // Update interceptor config when it changes\n  useEffect(() => {\n    if (interceptorRef.current) {\n      interceptorRef.current.updateConfig(configRef.current)\n    }\n  }, [config])\n\n  return null\n}\n\n// Error Boundary Component\nclass ErrorBoundary extends React.Component<{ children: React.ReactNode }, { hasError: boolean; error?: Error }> {\n  constructor(props: { children: React.ReactNode }) {\n    super(props)\n    this.state = { hasError: false }\n  }\n\n  static getDerivedStateFromError(error: Error) {\n    return { hasError: true, error }\n  }\n\n  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {\n    console.error(\"Error Boundary caught an error:\", error, errorInfo)\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return (\n        <div className=\"min-h-screen flex items-center justify-center bg-background\">\n          <div className=\"text-center p-8\">\n            <h2 className=\"text-2xl font-bold text-foreground mb-4\">Something went wrong</h2>\n            <p className=\"text-muted-foreground mb-6\">\n              We apologize for the inconvenience. Please refresh the page to continue.\n            </p>\n            <button\n              onClick={() => window.location.reload()}\n              className=\"px-4 py-2 bg-primary text-primary-foreground rounded-md hover:bg-primary/90 transition-colors\"\n            >\n              Refresh Page\n            </button>\n          </div>\n        </div>\n      )\n    }\n\n    return this.props.children\n  }\n}\n",
      "type": "registry:lib",
      "target": "utils/error-handler/provider.tsx"
    },
    {
      "path": "registry/error-handler/utils/error-handler/index.ts",
      "content": "export { ErrorHandlerProvider } from \"./provider\"\nexport { useErrorHandler } from \"./context\"\nexport { HttpInterceptor } from \"./interceptor\"\nexport { getErrorMapping, DEFAULT_ERROR_MAPPINGS, NETWORK_ERROR_MAPPINGS } from \"./error-mapper\"\n\n// Type exports\nexport type {\n  ErrorContext,\n  ErrorHandlerConfig,\n  ErrorHandlerContextType,\n  ErrorSeverity,\n  HttpMethod,\n  RequestConfig,\n  RetryConfig,\n} from \"./types\"\n\n// Import necessary modules\nimport { HttpInterceptor } from \"./interceptor\"\nimport { getErrorMapping } from \"./error-mapper\"\n\n// Utility function to create a configured fetch wrapper\nexport function createHttpClient(config?: Partial<import(\"./types\").ErrorHandlerConfig>) {\n  const defaultConfig = {\n    showToast: true,\n    enableRetry: true,\n    maxRetries: 3,\n    retryDelay: 1000,\n    debugMode: process.env.NODE_ENV === \"development\",\n    customMessages: {},\n    retryableStatusCodes: [408, 429, 500, 502, 503, 504],\n    timeoutMs: 10000,\n    ...config,\n  }\n\n  // Create a placeholder report function for the interceptor\n  const reportError = (error: import(\"./types\").ErrorContext) => {\n    console.warn(\"Error reported without context:\", error)\n  }\n\n  const interceptor = new HttpInterceptor(defaultConfig, reportError)\n\n  return {\n    fetch: globalThis.fetch,\n    restore: () => interceptor.restore(),\n    updateConfig: (newConfig: Partial<import(\"./types\").ErrorHandlerConfig>) =>\n      interceptor.updateConfig({ ...defaultConfig, ...newConfig }),\n  }\n}\n\n// Enhanced fetch function with built-in error handling\nexport async function safeFetch(input: RequestInfo | URL, init?: import(\"./types\").RequestConfig): Promise<Response> {\n  try {\n    const response = await fetch(input, init)\n\n    if (!response.ok && !init?.skipErrorHandler) {\n      throw new Error(`HTTP ${response.status}: ${response.statusText}`)\n    }\n\n    return response\n  } catch (error) {\n    if (init?.skipErrorHandler) {\n      throw error\n    }\n\n    // Error will be handled by the interceptor\n    throw error\n  }\n}\n\n// Utility to manually trigger error reporting\nexport function reportError(\n  statusCode: number,\n  message: string,\n  url: string = typeof window !== \"undefined\" ? window.location.href : \"\",\n  method = \"GET\",\n) {\n  if (typeof window !== \"undefined\") {\n    const mapping = getErrorMapping(statusCode)\n    const errorContext: import(\"./types\").ErrorContext = {\n      statusCode,\n      message,\n      timestamp: new Date(),\n      url,\n      method,\n      userMessage: mapping.userMessage,\n      canRetry: mapping.canRetry,\n      retryCount: 0,\n      actionLabel: mapping.actionLabel,\n      actionUrl: mapping.actionUrl,\n    }\n\n    window.dispatchEvent(new CustomEvent(\"manual-error-report\", { detail: errorContext }))\n  }\n}\n",
      "type": "registry:lib",
      "target": "utils/error-handler/index.ts"
    }
  ]
}